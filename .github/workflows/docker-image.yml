name: Build New Image

on:
  push:
    branches: [ "develop" ]

jobs:

  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.semver.outputs.version }}
      version_tag: ${{ steps.semver.outputs.version_tag }}
      commit: ${{ env.GITHUB_SHA }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: paulhatch/semantic-version@v5.0.2
      id: semver
      name: Calculate Semantic Version
      with:
        tag_prefix: "v"
        # A string which, if present in a git commit, indicates that a change represents a
        # major (breaking) change, supports regular expressions wrapped with '/'
        major_pattern: "feat"
        # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
        minor_pattern: "fix"
        # A string to determine the format of the version output
        version_format: "${major}.${minor}.${patch}"
        # If this is set to true, *every* commit will be treated as a new version.
        bump_each_commit: false
        # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
        search_commit_body: true
    - name: Debug Version
      continue-on-error: true
      run: |
        echo "Output of version: ${{ steps.semver.outputs.version }}"         
        echo "Output of version_tag: ${{ steps.semver.outputs.version_tag }}"         
        echo "Output of major: ${{ steps.semver.outputs.major }}"         
        echo "Output of minor: ${{ steps.semver.outputs.minor }}"         
        echo "Output of patch: ${{ steps.semver.outputs.patch }}"    

  # create_github_tag:
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Create release entry on GitHub
  #       uses: ncipollo/release-action@v1.12.0
  #       with:
  #         prerelease: false
  #         tag: ${{ needs.build.outputs.version_tag }}
  #         commit: ${{ needs.build.outputs.commit }}
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         generateReleaseNotes: true
  
  # create_docker_tag:
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out the repo
  #       uses: actions/checkout@v3

  #     - name: Log in to Docker Hub
  #       uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Create docker release
  #       run: docker build . --file Dockerfile --tag dhoeppner/website:${{ needs.build.outputs.version }}
        
  #     - name: Upload to docker hub
  #       run: docker push dhoeppner/website:${{ needs.build.outputs.version }}

